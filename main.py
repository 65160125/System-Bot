import os
import discord
from discord.ext import commands
from discord import app_commands
import asyncio
import random
from myserver import server_on

# Notification channel ID (replace with the actual channel ID for notifications)
NOTIFICATION_CHANNEL_ID = 1159149849539788932

# List of authorized user IDs
AUTHORIZED_USER_IDS = [767056525708492840, 978601165174472755]

intents = discord.Intents.default()
intents.members = True
intents.voice_states = True
intents.message_content = True  # Enable message content intent

bot = commands.Bot(command_prefix='/', intents=intents)

@bot.event
async def on_ready():
    print(f"Bot {bot.user} is online!")
    await bot.tree.sync()
    print("Commands synced")

async def disconnect_user(member, wait_time, original_channel, count):
    while count != 0:
        await asyncio.sleep(wait_time)
        if member.voice and member.voice.channel:
            await member.edit(voice_channel=None)  # Disconnect the user from the voice channel
            embed = discord.Embed(
                title="‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠",
                description=f"‡πÑ‡∏≠ <@{member.id}> ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ üòà.",
                color=discord.Color.red()
            )
            embed.add_field(name="‡πÇ‡∏î‡∏ô‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á", value=f"<#{original_channel.id}>", inline=True)
            embed.add_field(name="‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", value=f"{wait_time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ", inline=True)
            embed.set_footer(text="‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏õ‡∏≤‡∏Å‡∏´‡∏°‡∏≤‡∏à‡∏≥‡∏Å‡∏±‡∏î")

            notification_channel = bot.get_channel(NOTIFICATION_CHANNEL_ID)
            if notification_channel:
                await notification_channel.send(embed=embed)
            
            if count > 0:
                count -= 1
                if count == 0:
                    break
        else:
            break

@bot.event
async def on_voice_state_update(member, before, after):
    if member.id in bot.pending_disconnects:
        disconnect_info = bot.pending_disconnects[member.id]
        if after.channel:
            wait_time = disconnect_info['wait_time']
            count = disconnect_info['count']
            original_channel = after.channel
            await disconnect_user(member, wait_time, original_channel, count)
            if count == 0:
                bot.pending_disconnects.pop(member.id, None)

@bot.tree.command(name='hellobot', description='‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢')
async def hellocommand(interaction: discord.Interaction):
    await interaction.response.send_message("Hello ‡∏Å‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏ü‡∏ã‡∏¥‡∏™‡πÄ‡∏ï‡πâ‡∏°")

@bot.tree.command(name='name', description='‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢')
@app_commands.describe(name="‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏£ ?")
async def namecommand(interaction: discord.Interaction, name: str):
    await interaction.response.send_message(f"‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ‡πÑ‡∏≠{name}")

@bot.tree.command(name='disconnect', description='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠')
@app_commands.describe(name="‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", randomtime_from="‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)", randomtime_to="‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏∏‡πà‡∏°‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)", count="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡∏ï‡∏±‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ)")
async def disconnect(interaction: discord.Interaction, name: str, randomtime_from: int, randomtime_to: int, count: int = -1):
    if interaction.user.id not in AUTHORIZED_USER_IDS:
        await interaction.response.send_message("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", ephemeral=True)
        return

    guild = interaction.guild
    member = discord.utils.find(lambda m: m.name == name, guild.members)

    if member:
        wait_time = random.randint(randomtime_from, randomtime_to)
        bot.pending_disconnects[member.id] = {'wait_time': wait_time, 'count': count}
        await interaction.response.send_message(f"‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ {name} ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ô {wait_time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")

        # Disconnect immediately if the user is already in a voice channel
        if member.voice and member.voice.channel:
            original_channel = member.voice.channel
            await disconnect_user(member, wait_time, original_channel, count)
    else:
        await interaction.response.send_message(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠ {name}")

@bot.tree.command(name='stop', description='‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å')
@app_commands.describe(name="‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
async def stop(interaction: discord.Interaction, name: str):
    if interaction.user.id not in AUTHORIZED_USER_IDS:
        await interaction.response.send_message("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", ephemeral=True)
        return

    guild = interaction.guild
    member = discord.utils.find(lambda m: m.name == name, guild.members)

    if member and member.id in bot.pending_disconnects:
        bot.pending_disconnects.pop(member.id, None)
        await interaction.response.send_message(f"‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {name} ‡πÅ‡∏•‡πâ‡∏ß")
    else:
        await interaction.response.send_message(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠ {name} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î")

# Initialize the dictionary to keep track of pending disconnects
bot.pending_disconnects = {}

server_on()

bot.run(os.getenv('BOT_TOKEN'))
